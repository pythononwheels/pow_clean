{% extends "base.tmpl" %}

{% block content %}
    <!-- Begin page content -->
    <div class="container">
      <!-- The justified navigation menu is meant for single line per list item.
           Multiple lines will require custom code not provided by Bootstrap. -->
      

      <!-- Jumbotron -->
      <div class="jumbotron">
        <img src={{ static_url("images/pow_logo_300.png") }}  style="display: inline-block;" />
           <hr>
        <p class="lead">The quick and easy generative Webframework for python.</p>
        <p>
          <a class="btn btn-lg btn-success" href="#" role="button">Take the tutorial</a>
          <a class="btn btn-lg btn-info" href="#" role="button">Read the docs</a>
        </p>

      </div>
      <!-- START THE FEATURETTES -->

      <!--hr class="featurette-divider" -->
      <div class="row featurette">
        <div class="col-md-2">
          &nbsp;
        </div>
        <div class="col-md-8">
             <h2 class="featurette-heading">Everything you need on board. <span class="text-muted">Batteries included.</span></h2>
                <p class="lead">
                  With PythonOnWheels you need no extra tools to start. Everything from DB to Webserver and template engine is included.
                  But you are not forced to use them and can go raw or include your own tools whenever you want.
                </p>
                <h3> Based on a very Strong foundation: </h3>
                <ul>
                <li>python 3.x</li>
                <li>tornado webserver</li>
                <li>sqlalchemy ORM</li>
                <li>alembic migrations (automatically generated behind the scenes)</li>
                <li>cerberus schemas and validation on board</li>
                <li>react.js views</li>
                <li>tornado templates</li>
                </ul>
        </div>
        <div class="col-md-2">
          &nbsp;
        </div>
      </div>


      <hr class="featurette-divider">


      <div class="row featurette">
        <div class="col-md-2">
          &nbsp;
        </div>

        <div class="col-md-8">

              <h2 class="featurette-heading">Probably the most simple SQL relations out there! <span class="text-muted">Based on sqlalchemy.</span></h2>

                <p class="lead">
                  With PythonOnWheels you simply add a class decorator like <code>@relation.has_many("comments") </code> to the Post model and every Post can have comments. It will 
                  be automatically mapped to the DB (SQLite, Postgres, MySQL, MariaDb, Oracle, MSSQL ...) and to all related Models.
                </p>
                <p>
                  Supported relation types are:
                  <hr>
                  <ul>
                    <li><code>@relation.has_many("comments")</code>(decorated class has many comments.)</li>
                    <li><code>@relation.many_to_many("comments")</code>(decorated class has many to many with comments)</li>
                    <li><code>@relation.belongs_to("comments")</code>(decorated class belongs to comments.)</li>
                    <li><code>@relation.one_to_one("comments")</code>(decorated class has one to one with comments)</li>
                    <li><code>@relation.tree()</code> (decorated class has adjacence list (is a tree))</li>
                  </ul>
                </p>
                <p>For details of the implementation see <a href="http://docs.sqlalchemy.org/en/latest/orm/relationships.html">
                sqlalchemy relation documentation</a></p>
                <p class="lead">
                  Here is a typical pow model using a cerberus schema definition.
                  <ul>
                    <li>the <code>@relation.setup_schema() </code> decorator will map this schema to a vaild
                    sqlalchemy column definition set.</li>
                    <li>the model will also automatically get all the right Foreign_Keys and python attributes to
                    create a has_many relationship to the <code> comments </code> model. 
                    This is all done for you with the <code>@relation.has_many("comments") </code>
                  </ul>
                </p>
                <pre><code class="language-python">
@relation.has_many("comments")
@relation.setup_schema()
class Post(Base):
      #
      # Schema definition with the new (cerberus) schema style 
      # which offer you immediate validation 
      #
      schema = {
          # string sqltypes can be TEXT or UNICODE or nothing
          'author': {'type': 'string', 'maxlength' : 35},
          'title': {'type': 'string'},
          'text': {'type': 'string'}
      }

      # init
      def __init__(self, **kwargs):
          self.init_on_load(**kwargs)

      # your methods down here


                </code></pre>
          </div>
          <div class="col-md-2">
          &nbsp;
          </div>
      </div>

      

     
      <hr class="featurette-divider">
     <div class="row featurette">
        <div class="col-md-2">
          &nbsp;
        </div>
        <div class="col-md-8">
              <h2 class="featurette-heading">Probably the most simple RESTrouting out there! <span class="text-muted">Flask like direct routes included as well.</span></h2>
                <p class="lead">
                  With PythonOnWheels you simply add a class decorator like <code>@app.add_rest_routes("base") </code> 
                  to your handler and you get all the typical REST routes mapped to the according CRUD methods of your 
                  handler class.

                </p>
                <p>
                By the way: this is what <code>generate_handler</code> generates for you.
                </p>
                <pre><code class="language-python">
@app.add_rest_routes("comment")
class commentHandler(BaseHandler):

# 
# every pow handler automatically gets these RESTful routes
# thru the @app.add_rest_routes() decorator.
#
# 1  GET    /comment        #=> index
# 2  GET    /comment/1      #=> show
# 3  GET    /comment/new    #=> new
# 4  GET    /comment/1/edit #=> edit 
# 5  GET    /comment/page/1 #=> page
# 6  GET    /comment/search #=> search
# 7  PUT    /comment/1      #=> update
# 8  POST   /comment        #=> create
# 9  DELETE /comment/1      #=> destroy
#

# standard supported http methods are:
# SUPPORTED_METHODS = ("GET", "HEAD", "POST", "DELETE", "PATCH", "PUT", "OPTIONS")
# you can overwrite any of those directly or leave the 
# @add_rest_routes out to have a basic handler.
# 

def show(self, id=None):
    m=Comment()
    res=m.find_one(Comment.id==id)
    self.success(message="Comment show", data=res.json_dump())

def index(self):
    m=Comment()
    res = m.find_all(as_json=True)
    self.success(message="Comment, index", data=res)         

def page(self, page=0):
    m=Comment()
    page_size=myapp["page_size"]
    if database["type"] == "sqlite":
        limit=page_size
    else:
        limit=(page*page_size)+page_size
    res = m.find_all(as_json=True, 
        limit=limit,
        offset=page*page_size
        )
    self.success(message="Comment page: #" +str(page), data=res )  

@tornado.web.authenticated
def edit(self, id=None):
    self.success(message="Comment, edit id: " + str(id))

@tornado.web.authenticated
def new(self):
    self.success("Comment, new")

@tornado.web.authenticated
def create(self):
    self.success(message="Comment, create")

@tornado.web.authenticated
def update(self, id=None):
    self.success("Comment, update id: " + str(id))

@tornado.web.authenticated
def destroy(self, id=None):
    self.success("Comment, destroy id: " + str(id))
</code></pre>
            <br />
            <p class="lead">
                Additionally you can set direct routes by simply adding the class decorator: <code>@app.add_route("/post/([0-9+])", method="somemethod") 
                  </code>to add a direct route: matching the <code>regular expression</code> : <code>/post/([0-9+])</code> 
                  and then calling the given method of your handler class. The regex group <code>([0-9+])</code> will be handed as a parameter to
                  <code>somemethod(self, index)</code>
            </p>
            <br />
<pre><code class="language-python">
@app.add_route("/thanks/([0-9]+)*", method="testme")
class ThanksHandler(BaseHandler):
    def testme(self, index=None):
        self.render("thanks.tmpl", index=index)
</code></pre>
          </div>
          <div class="col-md-2">
            &nbsp;
          </div>
      </div>

      <hr class="featurette-divider">

      <div class="row featurette">
        <div class="col-md-2">
          &nbsp;
        </div>
        <div class="col-md-8">
          <h2 class="featurette-heading">And finally: a super easy workflow.<span class="text-muted"> Quick to start and all the basics on board:</span></h2>
          <p class="lead"></p>
          </ul>
          <div class="row">
            <div class="col-md-1">
              &nbsp;
            </div>
            <div class="col-md-10">
              
              <li>generative approach (but not noisy)</li>
              
              <ul>
                <li><code>generate_app</code></li>
                <li><code>generate_models script</code></li>
                <li><code>generate_migrations script </code></li>
                <li><code>generate_handlers</code> (handler are controllers)</li>
              </ul>
              <li>super easy relations with decorators @relations.has_many("comments")</li>
                <ul>
                  <li><code>@has_many(), @has_one(), @one_to_one(), @tree()</code></li>
                  <li> All the rest including foreign_keys, virtual python attributes are injected for you.</li>
                </ul>
              <li>super easy REST routing with decorators @app.add\_restful\_routes(), </li>
                <ul><li><code>@app.add_rest_routes("base_route")</code></li></ul>
              <li>flask like routing decorator @app.add_route(route)</li>
                <ul><li><code>@app.add_route("route")</code></li></ul>
              <li>db migrations autogenerated using alembic in the back </li>
                <ul><li><code>generate_migration, update_db</code></li></ul>
              <li>validation on board with cerberus schemas</li>
                <ul><li><code>model.validate() => executes cerberus validator</code></li></ul>
              </ul>
            </div>
            <div class="col-md-1">
              &nbsp;
            </div>
          </div>

        </div>
      </div>

      <hr class="featurette-divider">

      
      <div class="jumbotron">
        <p class="lead">Try it out now. <span class="text-muted">5 Minutes Tutorial text or video.</span></p>
        <p>
          <a class="btn btn-lg btn-success" href="#" role="button">Video tutorial</a>
          <a class="btn btn-lg btn-info" href="#" role="button">Text tutorial</a>
        </p>
      </div>

      <!-- /END THE FEATURETTES -->

      <!-- Site footer -->
      {% include "footer.tmpl" %}

    </div> <!-- /container -->
{% end %}